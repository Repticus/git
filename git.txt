git init => vytvori novy repozitar

git status => vypise aktualni branch a stav souboru

git add <soubor> => oznaci soubor k zapisu do repozitare
git add -u       => oznaci vsechny zmenene soubory k zapisu do repozitare
git add -A       => oznaci vsechny nove i zmenene soubory k zapisu do repozitare
git add -p       => rozdeli zmeny na vice casti, lze takto oznacit k zapisu jen nektere zmeny

git rm <soubor>   => vymaze soubor z pracovniho adresare i z repozitare a zrusi sledovani
git rm -f         => vymaze soubor z pracovniho adresare a zrusi sledovani ikdyz soubor jeste neni v repozitari
git rm --cached   => vymaze soubor pouze ze sledovani

git mv <soubor> <novysoubor> => prejmenuje soubor ve staged i v pracovnim adresari

git reset <vetev>           => obnovi vetev v repozitari do stavu z posledni ulozene revize,
                               ale zmeny v pracovnim adresari zustanou zachovany.
git reset <vetev> --hard    => obnovi vetev v repozitari vcetne pracovniho adresare a zahodi veskere zmeny
git reset HEAD <soubor>     => obnovi soubor v repozitari do stavu z aktualni revize,
                               ale zmeny v pracovnim adresari zustanou zachovany.
git reset HEAD^ -- <soubor> => obnovi soubor v repozitari do stavu z predchazejici revize,
                               ale zmeny v pracovnim adresari zustanou zachovany.

git show => vypise posledni revizi vcetne provedenych zmen

git commit             => zapise soubory oznacene k zapsani do nove revize, zepta se na zpravu k revizi obsahujici popis zmeny
git commit -m "zprava" => zapise soubory oznacene k zapsani do nove revize, pouzije uvedeny text zpravy
git commit -a          => zapise do nove revize vsechny sledovane soubory u kterych doslo ke zmene, neni potreba pouzit git add
git commit --amend     => prepise posledni revizi

git push <server> <vetev>       => odesle zadanou vetev na pojmenovany vzdaleny server.
                                   Parametry zadaneho serveru musi byt v repozitari ulozeny prikazem git remote.
git push <server> <tag>         => odesle zadany tag na pojmenovany vzdaleny server.
git push <server> --all         => odesle vsechny vetve na zadany server.
git push <server> --all --prune => odesle vsechny vetve na zadany server a vymaze na serveru vetve, ktere nejsou na lokalnim serveru.

git clone <adresa> => naklonuje repozitar ze zadane adresy do aktualniho adresare. Repozitar bude ulozen do noveho adresare.

git remote show                  => vypise seznam ulozenych pripojeni ke vzdalenym serverum.
git remote show <server>         => vypise parametry zadaneho pripojeni.
git remote add <server> <adresa> => prida do repozitare nove pripojeni pro vzdaleny server pod zadanym nazvem a adresou.

git log                     => vypise seznam revizi
git log -<pocet>            => vypise seznam revizi a omezi vypis na zadany pocet revizi
git log -p                  => vypise seznam revizi a pro kazdou revizi vypise seznam zmen v radkove forme
git log -p --word-diff      => pro kazdou revizi vypise seznam zmen ve forme zmenenych slov
git log --oneline           => vypise seznam revizi na jeden radek a zkrati hashe na 7 znaku
git log --stat              => vypise statistiky zmen
git log <revize>...<revize> => vypise pouze zmeny mezi zadanymi revizemi

git tag                   => vypise znacky v abecednim poradi
git tag -l <tag>          => vypise pouze znacky zacinajici uvedenym tagem napr. v1.4.*
git tag -a <tag>          => vytvori novy tag na posledni revizi
git tag -a <tag> <revize> => vytvori novy tag na zadane revizi
git tag -d <tag>          => smaze zadany tag

git branch                 => vypise seznam vetvi v repozitari
git branch <vetev>         => vytvori novou vetev z aktualni revize
git branch -d <vetev>      => vymaze zadanou vetev z repozitare pokud jiz slocena
git branch -D <vetev>      => vymaze zadanou vetev z repozitare bez ohledu na jeji drivejsi zacleneni
git branch -f <cil> <zdoj> => nahradi cilovou vetev zdrojovou vetvi vcetne historie
git branch -v              => vypise posledni revizi aktualni vetve
git branch --merged        => vypise vsechny vetve ktere jsou sloucene s aktualni vetvi
git branch --no-merged     => vypise vsechny vetve ktere nejsou sloucene s aktualni vetvi

git checkout <vetev>    => prepne na zadanou vetev a aktualizuje veskery obsah pracovniho adresare
git checkout <tag>      => prepne na zadanou verzi oznacenou tagem
git checkout -b <vetev> => vytvori novou vetev a zaroven se na ni prepne
git checkout <soubor>   => zahodi zmeny daneho souboru a obnovi jej do stavu z posledniho commitu
git checkout -f         => zahodi vsechny zmeny a obnovi vsechny soubory do stavu z posledniho commitu

git rebase -i <revize> => presklada historii aktualni vetve od revize ktera nasleduje za zadanou revizi dle prikazu nize
                          p, pick   = zapise revizi beze zmen
                          r, reword = zapise revizi, ale zmeni zpravu revize
                          e, edit   = zapise revizi, ale pred pokracovanim se zastavi, je mozno prepsat revizi pomoci amend
                          s, squash = zapise revizi a slouci ji do predchozi revize, zepta se na zpravu revize
                          f, fixup  = zapise revizi a slouci ji do predchozi revize, pouzije se zprava predchozi revize
git rebase -i --root   => presklada historii aktualni vetve od prvni revize
git rebase <vetev>     => presklada aktualni vetev na zadanou vetev, pak lze provest fast forvard merge v zadane vetvi
git rebase --continue  => pokracuje v preskladavani historie pri preruseni
git rebase --skip      => preskoci aktualni revizi a pokracuje v preskladavani historie pri preruseni
git rebase --abort     => prerusi prikaz rebase a vrati zmeny do puvodniho stavu

git merge <vetev> => slouci zadanou vetev do aktualni vetve

git stash                    => ulozi zmeny, ktere nebyly odeslany do repozitare prikazem commit do docasneho uloziste
                                a obnovi soubory v pracovnim adresari do stavu posledni revize.
git stash list               => vypise seznam zmen v docasnem ulozisti
git stash show               => vypise seznam souboru v docasnem ulozisti a statistiky zmen
git stash pop                => obnovi zmeny z docasneho uloziste a smaze zmenu z docasneho uloziste
git stash pop stash@{index}  => obnovi zadanou zmenu z docasneho uloziste a smaze zmenu z docasneho uloziste
git stash drop stash@{index} => smaze zmenu z docasneho uloziste

git config --global core.autocrlf true => nastavi GIT tak, aby pri commitu konvertoval LF na CRLF
git config --global core.autocrlf input => nastavi GIT tak, aby pri commitu konvertoval CRLF na LF
git config --global core.autocrlf false => nastavi GIT tak, aby pri commitu nekonvertoval nic
